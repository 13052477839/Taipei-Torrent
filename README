Taipei Torrent

This is a simple Bittorrent client coded in the go programming language.

FAQ:

Q: Why call it Taipei Torrent?
A: I started writing it while visiting Taipei, Taiwan

Q: What is the license?

A: The code in the bencode subdirectory is controlled by the LICENSE file in that
directory.

The code in the http subdirectory is controlled by the standard Go Authors license.

The code in the rest of Taipei Torrent is controlled by the LICENSE file in the
top level.

Q: Why do you have your own copy of the http package?

A: The UPnP client needs additional APIs that aren't supported by the standard http
package. I proposed the additional APIs as extensions to the standard http package,
but they were rejected because the http package is being redesigned. So for now I'm
using my own patched copy of the http package. When the standard http package has been
enhanced to support the features that UPnP needs I'll get rid of this patched version.

Current Status

+ Can encode / decode arbitrary bencode data.
+ Can download and parse a torrent file from a URL.
+ Can connect to a tracker and obtain a set of peers.
+ Can create and checksum the files listed in the info map
+ Can use UPnP to acquire a listener port
+ Can asynchronously connect to the initial batch of peers obtained from the tracker
+ Can asynchronously send and receive messages from connected peers
+ Can request and receive blocks from connected peers.
+ Can schedule which pieces and blocks to request.
+ Can handle remote choke/unchoke messages.
+ Register a listener port to listen for peer connections
+ Send blocks to connected unchoked peers.
+ Report our status to the tracker periodicly.
+ Implement interested/uninterested logic
+ Detect blocks that were requested but never sent.
+ Detect hung peers
+ Have Endgame support for obtaining last few blocks.
+ Progress display

Development Roadmap

+ Implement choke/unchoke logic
+ Handle multiple files
+ Handle torrents that are not a multiple of block size in length.
+ Handle creating directories in torrent file list
+ Cache torrent file rather than downloading each time.
+ Full UPnP support (need to be able to search for an unused listener port,
  detect we have already acquired the port,
  release the listener port when we quit.)
+ Cean up source code
+ Deal with TODOS

BUGS
- Need to deal with peers who send 16K "port" messages.
